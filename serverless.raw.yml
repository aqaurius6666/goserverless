# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
service: goserverless
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'
plugins:
  - serverless-deployment-bucket

provider:
  name: aws
  architecture: arm64
  runtime: provided.al2
  region: ap-southeast-1
  iam:
    role:
      name: ${self:custom.resourceNames.lambdaExecutionRole}
      statements: !include resources/lambda-execution-role-statements.yml
  deploymentBucket:
    name: ${self:custom.resourceNames.deploymentBucket}
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.resourceNames.dynamodbTable}
package:
  individually: true
custom:
  resourceNames:
    # Lambda function
    postEcho: ${sls:stage}-${self:service}-post-echo
    getEcho: ${sls:stage}-${self:service}-get-echo
    # AWS Resources
    lambdaExecutionRole: ${sls:stage}-${self:service}-lambda-execution-role
    dynamodbTable: ${sls:stage}-${self:service}-table
    deploymentBucket: ${aws:accountId}-${sls:stage}-${self:service}-deployment-bucket
  deploymentBucket:
    name: ${self:custom.resourceNames.deploymentBucket}
    blockPublicAccess: true
functions: !include handler.yml
  
resources:
  Resources: !include resources/resources.yml